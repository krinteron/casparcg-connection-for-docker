import { BasicCasparCGAPI, SendResult } from './api';
import { LoadbgParameters, LoadParameters, PlayParameters, PauseParameters, ResumeParameters, StopParameters, ClearParameters, CallParameters, SwapParameters, AddParameters, RemoveParameters, PrintParameters, LogLevelParameters, LogCategoryParameters, SetParameters, LockParameters, DataStoreParameters, DataRetrieveParameters, DataListParameters, DataRemoveParameters, CgAddParameters, CgPlayParameters, CgStopParameters, CgNextParameters, CgRemoveParameters, CgClearParameters, CgUpdateParameters, CgInvokeParameters, CgInfoParameters, MixerKeyerParameters, MixerChromaParameters, MixerBlendParameters, MixerInvertParameters, MixerOpacityParameters, MixerBrightnessParameters, MixerSaturationParameters, MixerContrastParameters, MixerLevelsParameters, MixerFillParameters, MixerClipParameters, MixerAnchorParameters, MixerCropParameters, MixerRotationParameters, MixerPerspectiveParameters, MixerMipmapParameters, MixerVolumeParameters, MixerMastervolumeParameters, MixerStraightAlphaOutputParameters, MixerGridParameters, MixerCommitParameters, MixerClearParameters, ChannelGridParameters, ThumbnailListParameters, ThumbnailRetrieveParameters, ThumbnailGenerateParameters, ThumbnailGenerateAllParameters, CinfParameters, ClsParameters, FlsParameters, TlsParameters, VersionParameters, InfoParameters, InfoTemplateParameters, InfoConfigParameters, InfoPathsParameters, InfoSystemParameters, InfoServerParameters, InfoQueuesParameters, InfoThreadsParameters, InfoDelayParameters, DiagParameters, GlInfoParameters, GlGcParameters, ByeParameters, KillParameters, RestartParameters } from './parameters';
export declare class CasparCG extends BasicCasparCGAPI {
    loadbg(params: LoadbgParameters): Promise<SendResult>;
    load(params: LoadParameters): Promise<SendResult>;
    play(params: PlayParameters): Promise<SendResult>;
    pause(params: PauseParameters): Promise<SendResult>;
    resume(params: ResumeParameters): Promise<SendResult>;
    stop(params: StopParameters): Promise<SendResult>;
    clear(params: ClearParameters): Promise<SendResult>;
    call(params: CallParameters): Promise<SendResult>;
    swap(params: SwapParameters): Promise<SendResult>;
    add(params: AddParameters): Promise<SendResult>;
    remove(params: RemoveParameters): Promise<SendResult>;
    print(params: PrintParameters): Promise<SendResult>;
    logLevel(params: LogLevelParameters): Promise<SendResult>;
    logCategory(params: LogCategoryParameters): Promise<SendResult>;
    set(params: SetParameters): Promise<SendResult>;
    lock(params: LockParameters): Promise<SendResult>;
    dataStore(params: DataStoreParameters): Promise<SendResult>;
    dataRetrieve(params: DataRetrieveParameters): Promise<SendResult>;
    dataList(params: DataListParameters): Promise<SendResult>;
    dataRemove(params: DataRemoveParameters): Promise<SendResult>;
    cgAdd(params: CgAddParameters): Promise<SendResult>;
    cgPlay(params: CgPlayParameters): Promise<SendResult>;
    cgStop(params: CgStopParameters): Promise<SendResult>;
    cgNext(params: CgNextParameters): Promise<SendResult>;
    cgRemove(params: CgRemoveParameters): Promise<SendResult>;
    cgClear(params: CgClearParameters): Promise<SendResult>;
    cgUpdate(params: CgUpdateParameters): Promise<SendResult>;
    cgInvoke(params: CgInvokeParameters): Promise<SendResult>;
    cgInfo(params: CgInfoParameters): Promise<SendResult>;
    mixerKeyer(params: MixerKeyerParameters): Promise<SendResult>;
    mixerChroma(params: MixerChromaParameters): Promise<SendResult>;
    mixerBlend(params: MixerBlendParameters): Promise<SendResult>;
    mixerInvert(params: MixerInvertParameters): Promise<SendResult>;
    mixerOpacity(params: MixerOpacityParameters): Promise<SendResult>;
    mixerBrightness(params: MixerBrightnessParameters): Promise<SendResult>;
    mixerSaturation(params: MixerSaturationParameters): Promise<SendResult>;
    mixerContrast(params: MixerContrastParameters): Promise<SendResult>;
    mixerLevels(params: MixerLevelsParameters): Promise<SendResult>;
    mixerFill(params: MixerFillParameters): Promise<SendResult>;
    mixerClip(params: MixerClipParameters): Promise<SendResult>;
    mixerAnchor(params: MixerAnchorParameters): Promise<SendResult>;
    mixerCrop(params: MixerCropParameters): Promise<SendResult>;
    mixerRotation(params: MixerRotationParameters): Promise<SendResult>;
    mixerPerspective(params: MixerPerspectiveParameters): Promise<SendResult>;
    mixerMipmap(params: MixerMipmapParameters): Promise<SendResult>;
    mixerVolume(params: MixerVolumeParameters): Promise<SendResult>;
    mixerMastervolume(params: MixerMastervolumeParameters): Promise<SendResult>;
    mixerStraightAlphaOutput(params: MixerStraightAlphaOutputParameters): Promise<SendResult>;
    mixerGrid(params: MixerGridParameters): Promise<SendResult>;
    mixerCommit(params: MixerCommitParameters): Promise<SendResult>;
    mixerClear(params: MixerClearParameters): Promise<SendResult>;
    channelGrid(params?: ChannelGridParameters): Promise<SendResult>;
    thumbnailList(params: ThumbnailListParameters): Promise<SendResult>;
    thumbnailRetrieve(params: ThumbnailRetrieveParameters): Promise<SendResult>;
    thumbnailGenerate(params: ThumbnailGenerateParameters): Promise<SendResult>;
    thumbnailGenerateAll(params?: ThumbnailGenerateAllParameters): Promise<SendResult>;
    cinf(params: CinfParameters): Promise<SendResult>;
    cls(params: ClsParameters): Promise<SendResult>;
    fls(params?: FlsParameters): Promise<SendResult>;
    tls(params: TlsParameters): Promise<SendResult>;
    version(params?: VersionParameters): Promise<SendResult>;
    info(params: InfoParameters): Promise<SendResult>;
    infoTemplate(params: InfoTemplateParameters): Promise<SendResult>;
    infoConfig(params?: InfoConfigParameters): Promise<SendResult>;
    infoPaths(params?: InfoPathsParameters): Promise<SendResult>;
    infoSystem(params?: InfoSystemParameters): Promise<SendResult>;
    infoServer(params?: InfoServerParameters): Promise<SendResult>;
    infoQueues(params?: InfoQueuesParameters): Promise<SendResult>;
    infoThreads(params?: InfoThreadsParameters): Promise<SendResult>;
    infoDelay(params: InfoDelayParameters): Promise<SendResult>;
    diag(params?: DiagParameters): Promise<SendResult>;
    glInfo(params?: GlInfoParameters): Promise<SendResult>;
    glGc(params?: GlGcParameters): Promise<SendResult>;
    bye(params?: ByeParameters): Promise<SendResult>;
    kill(params?: KillParameters): Promise<SendResult>;
    restart(params?: RestartParameters): Promise<SendResult>;
}
//# sourceMappingURL=CasparCG.d.ts.map